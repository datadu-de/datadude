{
  
    
        "post0": {
            "title": "Title",
            "content": "hide: true | . import requests import ssl import pandas as pd import matplotlib.pyplot as plt locations = { &quot;Karlsruhe&quot;: (49.0094, 8.4044, 118), &quot;Tenerife&quot;: (28.4682, -16.2546, 55), &quot;Lisbon&quot;: (38.7167, -9.1333, 45), &quot;Mallorca&quot;: (39.55, 2.7333, 4) } climate = None base_url = &quot;https://api.meteostat.net/v2/point/climate&quot; for name, coords in locations.items(): print(f&quot;Starting {name}...&quot;) print(f&quot;Coordinates: {coords}&quot;) point = met.Point(*coords) lat, lng, alt = coords url = f&quot;{base_url}?lat={lat}&amp;lng={lng}&amp;alt={alt}&quot; response = requests.get(url, context=ssl._create_unverified_context()) print(response.json()) # if climate is None: # climate = data # else: # climate.append(data) # climate.describe() . Starting Karlsruhe... Coordinates: (49.0094, 8.4044, 118) . TypeError Traceback (most recent call last) &lt;ipython-input-41-de7d88edb536&gt; in &lt;module&gt; 24 lat, lng, alt = coords 25 url = f&#34;{base_url}?lat={lat}&amp;lng={lng}&amp;alt={alt}&#34; &gt; 26 response = requests.get(url, context=ssl._create_unverified_context()) 27 28 C: Program Files Python37 lib site-packages requests api.py in get(url, params, **kwargs) 74 75 kwargs.setdefault(&#39;allow_redirects&#39;, True) &gt; 76 return request(&#39;get&#39;, url, params=params, **kwargs) 77 78 C: Program Files Python37 lib site-packages requests api.py in request(method, url, **kwargs) 59 # cases, and look like a memory leak in others. 60 with sessions.Session() as session: &gt; 61 return session.request(method=method, url=url, **kwargs) 62 63 TypeError: request() got an unexpected keyword argument &#39;context&#39; . p = met.Point(28.463631, -16.251846) met.Daily(p, start, end).fetch() . tavg tmin tmax prcp snow wdir wspd wpgt pres tsun . api_key = &quot;5065b49e0c7e031845e419be78294b58&quot; locations = [(&quot;Karlsruhe&quot;, &quot;DE&quot;), (&quot;Lisbon&quot;, &quot;PT&quot;), (&quot;Santa Cruz de Tenerife&quot;, &quot;ES&quot;), (&quot;Palma de Mallorca&quot;, &quot;ES&quot;)] base_url = Template(&quot;https://history.openweathermap.org/data/2.5/aggregated/year?q=$city_name,$country_code&amp;appid=$api_key&quot;) climate = None for city_name, country_code in locations: url = base_url.substitute(city_name=city_name, country_code=country_code, api_key=api_key) print(url) . https://history.openweathermap.org/data/2.5/aggregated/year?q=Karlsruhe,DE&amp;appid=5065b49e0c7e031845e419be78294b58 https://history.openweathermap.org/data/2.5/aggregated/year?q=Lisbon,PT&amp;appid=5065b49e0c7e031845e419be78294b58 https://history.openweathermap.org/data/2.5/aggregated/year?q=Santa Cruz de Tenerife,ES&amp;appid=5065b49e0c7e031845e419be78294b58 https://history.openweathermap.org/data/2.5/aggregated/year?q=Palma de Mallorca,ES&amp;appid=5065b49e0c7e031845e419be78294b58 . pd.read_json(&quot;https://history.openweathermap.org/data/2.5/aggregated/year?q=Karlsruhe,DE&amp;appid=5065b49e0c7e031845e419be78294b58&quot;) . HTTPError Traceback (most recent call last) &lt;ipython-input-139-3741f75be26e&gt; in &lt;module&gt; -&gt; 1 pd.read_json(&#34;https://history.openweathermap.org/data/2.5/aggregated/year?q=Karlsruhe,DE&amp;appid=5065b49e0c7e031845e419be78294b58&#34;) C: Program Files Python37 lib site-packages pandas util _decorators.py in wrapper(*args, **kwargs) 197 else: 198 kwargs[new_arg_name] = new_arg_value --&gt; 199 return func(*args, **kwargs) 200 201 return cast(F, wrapper) C: Program Files Python37 lib site-packages pandas util _decorators.py in wrapper(*args, **kwargs) 297 ) 298 warnings.warn(msg, FutureWarning, stacklevel=stacklevel) --&gt; 299 return func(*args, **kwargs) 300 301 return wrapper C: Program Files Python37 lib site-packages pandas io json _json.py in read_json(path_or_buf, orient, typ, dtype, convert_axes, convert_dates, keep_default_dates, numpy, precise_float, date_unit, encoding, lines, chunksize, compression, nrows, storage_options) 554 compression=compression, 555 nrows=nrows, --&gt; 556 storage_options=storage_options, 557 ) 558 C: Program Files Python37 lib site-packages pandas io json _json.py in __init__(self, filepath_or_buffer, orient, typ, dtype, convert_axes, convert_dates, keep_default_dates, numpy, precise_float, date_unit, encoding, lines, chunksize, compression, nrows, storage_options) 620 raise ValueError(&#34;nrows can only be passed if lines=True&#34;) 621 --&gt; 622 data = self._get_data_from_filepath(filepath_or_buffer) 623 self.data = self._preprocess_data(data) 624 C: Program Files Python37 lib site-packages pandas io json _json.py in _get_data_from_filepath(self, filepath_or_buffer) 662 encoding=self.encoding, 663 compression=self.compression, --&gt; 664 storage_options=self.storage_options, 665 ) 666 filepath_or_buffer = self.handles.handle C: Program Files Python37 lib site-packages pandas io common.py in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options) 561 compression=compression, 562 mode=mode, --&gt; 563 storage_options=storage_options, 564 ) 565 C: Program Files Python37 lib site-packages pandas io common.py in _get_filepath_or_buffer(filepath_or_buffer, encoding, compression, mode, storage_options) 287 &#34;storage_options passed with file object or non-fsspec file path&#34; 288 ) --&gt; 289 req = urlopen(filepath_or_buffer) 290 content_encoding = req.headers.get(&#34;Content-Encoding&#34;, None) 291 if content_encoding == &#34;gzip&#34;: C: Program Files Python37 lib site-packages pandas io common.py in urlopen(*args, **kwargs) 193 import urllib.request 194 --&gt; 195 return urllib.request.urlopen(*args, **kwargs) 196 197 C: Program Files Python37 lib urllib request.py in urlopen(url, data, timeout, cafile, capath, cadefault, context) 220 else: 221 opener = _opener --&gt; 222 return opener.open(url, data, timeout) 223 224 def install_opener(opener): C: Program Files Python37 lib urllib request.py in open(self, fullurl, data, timeout) 529 for processor in self.process_response.get(protocol, []): 530 meth = getattr(processor, meth_name) --&gt; 531 response = meth(req, response) 532 533 return response C: Program Files Python37 lib urllib request.py in http_response(self, request, response) 639 if not (200 &lt;= code &lt; 300): 640 response = self.parent.error( --&gt; 641 &#39;http&#39;, request, response, code, msg, hdrs) 642 643 return response C: Program Files Python37 lib urllib request.py in error(self, proto, *args) 567 if http_err: 568 args = (dict, &#39;default&#39;, &#39;http_error_default&#39;) + orig_args --&gt; 569 return self._call_chain(*args) 570 571 # XXX probably also want an abstract factory that knows when it makes C: Program Files Python37 lib urllib request.py in _call_chain(self, chain, kind, meth_name, *args) 501 for handler in handlers: 502 func = getattr(handler, meth_name) --&gt; 503 result = func(*args) 504 if result is not None: 505 return result C: Program Files Python37 lib urllib request.py in http_error_default(self, req, fp, code, msg, hdrs) 647 class HTTPDefaultErrorHandler(BaseHandler): 648 def http_error_default(self, req, fp, code, msg, hdrs): --&gt; 649 raise HTTPError(req.full_url, code, msg, hdrs, fp) 650 651 class HTTPRedirectHandler(BaseHandler): HTTPError: HTTP Error 401: Unauthorized . buff = io.BytesIO(rawdata) df = pd.read_csv(buff) . import altair as alt . df . Month TempMax TempMin TempWater Humidity Sunshine Hours Rainy Days Location . 0 1 | 14.0 | 8.0 | 14.0 | 78.0 | 5.0 | 15.0 | Lissabon | . 1 2 | 15.0 | 8.0 | 14.0 | 72.0 | 7.0 | 12.0 | Lissabon | . 2 3 | 17.0 | 10.0 | 14.0 | 71.0 | 7.0 | 14.0 | Lissabon | . 3 4 | 20.0 | 12.0 | 15.0 | 63.0 | 9.0 | 10.0 | Lissabon | . 4 5 | 21.0 | 13.0 | 16.0 | 63.0 | 10.0 | 10.0 | Lissabon | . 5 6 | 25.0 | 15.0 | 17.0 | 60.0 | 11.0 | 5.0 | Lissabon | . 6 7 | 27.0 | 17.0 | 18.0 | 55.0 | 12.0 | 2.0 | Lissabon | . 7 8 | 28.0 | 17.0 | 19.0 | 57.0 | 12.0 | 2.0 | Lissabon | . 8 9 | 26.0 | 17.0 | 19.0 | 62.0 | 9.0 | 6.0 | Lissabon | . 9 10 | 22.0 | 14.0 | 18.0 | 67.0 | 7.0 | 9.0 | Lissabon | . 10 11 | 17.0 | 11.0 | 16.0 | 75.0 | 6.0 | 13.0 | Lissabon | . 11 12 | 15.0 | 9.0 | 15.0 | 75.0 | 5.0 | 15.0 | Lissabon | . 12 1 | 20.0 | 14.0 | 19.0 | 68.0 | 6.0 | 7.0 | Teneriffa | . 13 2 | 21.0 | 14.0 | 18.0 | 67.0 | 7.0 | 5.0 | Teneriffa | . 14 3 | 22.0 | 15.0 | 18.0 | 64.0 | 7.0 | 4.0 | Teneriffa | . 15 4 | 23.0 | 16.0 | 18.0 | 61.0 | 8.0 | 2.0 | Teneriffa | . 16 5 | 24.0 | 17.0 | 19.0 | 63.0 | 9.0 | 1.0 | Teneriffa | . 17 6 | 26.0 | 19.0 | 20.0 | 63.0 | 10.0 | NaN | Teneriffa | . 18 7 | 28.0 | 20.0 | 21.0 | 59.0 | 11.0 | NaN | Teneriffa | . 19 8 | 29.0 | 21.0 | 22.0 | 62.0 | 11.0 | NaN | Teneriffa | . 20 9 | 28.0 | 21.0 | 23.0 | 66.0 | 8.0 | NaN | Teneriffa | . 21 10 | 26.0 | 19.0 | 23.0 | 67.0 | 7.0 | 4.0 | Teneriffa | . 22 11 | 24.0 | 17.0 | 21.0 | 68.0 | 6.0 | 5.0 | Teneriffa | . 23 12 | 21.0 | 16.0 | 20.0 | 68.0 | 5.0 | 7.0 | Teneriffa | . 24 1 | 14.0 | 6.0 | 14.0 | 78.0 | 5.0 | 8.0 | Mallorca | . 25 2 | 15.0 | 6.0 | 13.0 | 76.0 | 6.0 | 6.0 | Mallorca | . 26 3 | 17.0 | 8.0 | 14.0 | 75.0 | 6.0 | 8.0 | Mallorca | . 27 4 | 19.0 | 10.0 | 15.0 | 72.0 | 8.0 | 5.0 | Mallorca | . 28 5 | 22.0 | 13.0 | 17.0 | 72.0 | 10.0 | 5.0 | Mallorca | . 29 6 | 26.0 | 17.0 | 21.0 | 68.0 | 10.0 | 3.0 | Mallorca | . 30 7 | 29.0 | 20.0 | 24.0 | 68.0 | 11.0 | 1.0 | Mallorca | . 31 8 | 29.0 | 20.0 | 25.0 | 70.0 | 11.0 | 3.0 | Mallorca | . 32 9 | 27.0 | 18.0 | 24.0 | 74.0 | 8.0 | 6.0 | Mallorca | . 33 10 | 23.0 | 14.0 | 21.0 | 77.0 | 6.0 | 9.0 | Mallorca | . 34 11 | 18.0 | 10.0 | 18.0 | 78.0 | 6.0 | 8.0 | Mallorca | . 35 12 | 15.0 | 8.0 | 15.0 | 78.0 | 5.0 | 9.0 | Mallorca | . 36 1 | 23.0 | 16.0 | 20.2 | 66.0 | 8.0 | 10.0 | Auckland | . 37 2 | 23.0 | 16.0 | 21.2 | 67.0 | 7.0 | 10.0 | Auckland | . 38 3 | 22.0 | 15.0 | 20.9 | 70.0 | 6.0 | 12.0 | Auckland | . 39 4 | 19.0 | 13.0 | 19.6 | 74.0 | 5.0 | 15.0 | Auckland | . 40 5 | 17.0 | 11.0 | 18.0 | 76.0 | 4.0 | 19.0 | Auckland | . 41 6 | 14.0 | 9.0 | 16.4 | 79.0 | 4.0 | 20.0 | Auckland | . 42 7 | 13.0 | 8.0 | 15.1 | 80.0 | 4.0 | 20.0 | Auckland | . 43 8 | 14.0 | 8.0 | 14.6 | 76.0 | 5.0 | 19.0 | Auckland | . 44 9 | 16.0 | 9.0 | 15.0 | 72.0 | 6.0 | 16.0 | Auckland | . 45 10 | 17.0 | 11.0 | 15.6 | 70.0 | 6.0 | 17.0 | Auckland | . 46 11 | 19.0 | 12.0 | 16.9 | 68.0 | 7.0 | 15.0 | Auckland | . 47 12 | 21.0 | 14.0 | 18.4 | 68.0 | 7.0 | 12.0 | Auckland | . 48 1 | 3.8 | -1.4 | NaN | 85.0 | 1.5 | 11.0 | Karlsruhe | . 49 2 | 6.1 | -0.7 | NaN | 80.0 | 2.7 | 10.0 | Karlsruhe | . 50 3 | 10.9 | 1.9 | NaN | 74.0 | 3.9 | 11.0 | Karlsruhe | . 51 4 | 15.4 | 4.9 | NaN | 69.0 | 5.4 | 10.0 | Karlsruhe | . 52 5 | 19.9 | 8.9 | NaN | 69.0 | 6.8 | 12.0 | Karlsruhe | . 53 6 | 23.0 | 12.2 | NaN | 69.0 | 7.3 | 11.0 | Karlsruhe | . 54 7 | 25.5 | 14.0 | NaN | 67.0 | 7.9 | 10.0 | Karlsruhe | . 55 8 | 25.1 | 13.8 | NaN | 71.0 | 7.1 | 10.0 | Karlsruhe | . 56 9 | 21.5 | 10.6 | NaN | 77.0 | 5.7 | 8.0 | Karlsruhe | . 57 10 | 15.3 | 6.7 | NaN | 82.0 | 3.6 | 9.0 | Karlsruhe | . 58 11 | 8.5 | 2.4 | NaN | 84.0 | 2.0 | 11.0 | Karlsruhe | . 59 12 | 4.8 | -0.4 | NaN | 84.0 | 1.5 | 11.0 | Karlsruhe | . filt = (df[&quot;Location&quot;] == &quot;Lissabon&quot;) | (df[&quot;Location&quot;] == &quot;Teneriffa&quot;) | (df[&quot;Location&quot;] == &quot;Karlsruhe&quot;) base_chart = alt.Chart(df[filt]) (base_chart.encode( x=&quot;Month:O&quot;, y=&quot;Sunshine Hours&quot;, color=&quot;Location&quot; ).mark_point() + base_chart.encode( x=&quot;Month:O&quot;, y=&quot;TempMax&quot;, y2=&quot;TempMin&quot;, color=&quot;Location&quot; ).mark_area(fillOpacity=.5, line=True) ).properties( width=800) &amp; base_chart.encode( x=&quot;Location&quot;, y=alt.Y(&quot;Rainy Days&quot;, stack=None), column=&quot;Month&quot;, color=&quot;Location&quot; ).mark_bar(fillOpacity=0.5, orient=&quot;vertical&quot;, binSpacing=10) .",
            "url": "https://datadu.de/2021/04/29/a-new-home.html",
            "relUrl": "/2021/04/29/a-new-home.html",
            "date": " • Apr 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Shouldn't this be easier?",
            "content": "import pandas as pd data = { &quot;continent&quot;: [&quot;Americas&quot;, &quot;Americas&quot;, &quot;Asia&quot;, &quot;Europe&quot;], &quot;country&quot;: [ &quot;USA&quot;, &quot;Mexico&quot;, &quot;Japan&quot;, &quot;France&quot;], &quot;Population 2014&quot;: [1, 2, 3, 4], &quot;Population 2015&quot;: [5, 6, 7, 8], } df = pd.DataFrame(data) df . continent country Population 2014 Population 2015 . 0 Americas | USA | 1 | 5 | . 1 Americas | Mexico | 2 | 6 | . 2 Asia | Japan | 3 | 7 | . 3 Europe | France | 4 | 8 | . df.melt(id_vars=[&quot;continent&quot;, &quot;country&quot;]) . continent country variable value . 0 Americas | USA | Population 2014 | 1 | . 1 Americas | Mexico | Population 2014 | 2 | . 2 Asia | Japan | Population 2014 | 3 | . 3 Europe | France | Population 2014 | 4 | . 4 Americas | USA | Population 2015 | 5 | . 5 Americas | Mexico | Population 2015 | 6 | . 6 Asia | Japan | Population 2015 | 7 | . 7 Europe | France | Population 2015 | 8 | . spark_df = spark.createDataFrame(df) display(spark_df) . continentcountryPopulation 2014Population 2015 . Americas | USA | 1 | 5 | . Americas | Mexico | 2 | 6 | . Asia | Japan | 3 | 7 | . Europe | France | 4 | 8 | . from pyspark.sql import DataFrame from typing import Iterable def unpivot_df( df: DataFrame, id_cols: Iterable[str], pvt_cols: Iterable[str]=None, col_name: str=&quot;Column&quot;, val_name: str=&quot;Value&quot;) -&gt; DataFrame: _df = df _cols = set(_df.columns) _id_cols = id_cols if pvt_cols is None: _pvt_cols = list(_cols.difference(id_cols)) else: _pvt_cols = pvt_cols _stack_expr = &#39;, &#39;.join([&quot;&#39;{}&#39;, `{}`&quot;.format(_c, _c) for _c in _pvt_cols]) _stack_expr = f&quot;&quot;&quot;stack({len(_pvt_cols)}, {_stack_expr}) as ({col_name}, {val_name})&quot;&quot;&quot; _unpvt_expr = _id_cols + [_stack_expr, ] _unpvt_df = _df.selectExpr(*_unpvt_expr) return _unpvt_df . spark_df_long = unpivot_df(spark_df, [&quot;continent&quot;, &quot;country&quot;]) display(spark_df_long) . continentcountryColumnValue . Americas | USA | Population 2015 | 5 | . Americas | USA | Population 2014 | 1 | . Americas | Mexico | Population 2015 | 6 | . Americas | Mexico | Population 2014 | 2 | . Asia | Japan | Population 2015 | 7 | . Asia | Japan | Population 2014 | 3 | . Europe | France | Population 2015 | 8 | . Europe | France | Population 2014 | 4 | . et voila .",
            "url": "https://datadu.de/spark/pyspark/databricks/2021/04/28/unpivot-other-columns.html",
            "relUrl": "/spark/pyspark/databricks/2021/04/28/unpivot-other-columns.html",
            "date": " • Apr 28, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://datadu.de/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://datadu.de/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m Frank . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://datadu.de/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://datadu.de/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}